import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go

# Load the dataset (update path accordingly)
@st.cache
def load_data():
    df = pd.read_csv("sampled_df.csv")
    # Preprocess data
    df['event_time'] = pd.to_datetime(df['event_time'].str.replace(' UTC', ''), format='%Y-%m-%d %H:%M:%S')
    df['date'] = df['event_time'].dt.date
    df['day_of_week'] = df['event_time'].dt.day_name()
    df = df.dropna(subset=['price']).reset_index(drop=True)
    df['log_price'] = np.log(df['price'])
    low_threshold = df['log_price'].quantile(0.333)
    medium_threshold = df['log_price'].quantile(0.66)

    def categorize_premiumness(log_price):
        if log_price <= low_threshold:
            return 'Low'
        elif log_price <= medium_threshold:
            return 'Medium'
        else:
            return 'High'

    df['premiumness'] = df['log_price'].apply(categorize_premiumness)
    return df

df = load_data()

# Sidebar navigation
st.sidebar.title("Navigation")
page = st.sidebar.selectbox("Select Page", ["Hypothesis Testing", "Recommendation System - Bayesian"])

if page == "Hypothesis Testing":
    st.title("Hypothesis Testing")

    # Plot 1: Actual Prices
    st.subheader("Distribution of Actual Prices")
    fig1 = px.histogram(
        df,
        x='price',
        nbins=30,
        title='Distribution of Actual Prices',
        labels={'price': 'Price'},
        template='plotly',
        color_discrete_sequence=['blue']
    )
    fig1.update_traces(opacity=0.7)
    fig1.update_layout(
        xaxis_title='Price',
        yaxis_title='Frequency',
        height=600
    )
    st.plotly_chart(fig1)

    # Plot 2: Log-Transformed Prices
    st.subheader("Distribution of Log-Transformed Prices")
    fig2 = px.histogram(
        df,
        x='log_price',
        nbins=30,
        title='Distribution of Log-Transformed Prices',
        labels={'log_price': 'Log Price'},
        template='plotly',
        color_discrete_sequence=['purple']
    )
    fig2.update_traces(opacity=0.7)
    fig2.update_layout(
        xaxis_title='Log Price',
        yaxis_title='Frequency',
        height=600
    )
    st.plotly_chart(fig2)

    # Plot 3: Log-Transformed Prices by Premiumness
    st.subheader("Distribution of Log-Transformed Prices by Premiumness")
    fig3 = px.histogram(
        df,
        x='log_price',
        nbins=30,
        color='premiumness',
        title='Distribution of Log-Transformed Prices by Premiumness',
        labels={'log_price': 'Log Price', 'premiumness': 'Premiumness'},
        color_discrete_map={'Low': 'blue', 'Medium': 'orange', 'High': 'green'},
        template='plotly'
    )
    fig3.update_traces(opacity=0.7)
    fig3.update_layout(
        xaxis_title='Log Price',
        yaxis_title='Frequency',
        legend_title='Premiumness',
        height=600
    )
    st.plotly_chart(fig3)

elif page == "Recommendation System - Bayesian":
    st.title("Recommendation System - Bayesian")

    # Placeholder for recommendation system explanation and implementation
    st.write("This page will host the Bayesian recommendation system.")

    # Example: Adding a placeholder table for top recommendations
    st.subheader("Top Recommendations")

    # Example placeholder recommendations (replace with actual logic)
    sample_recommendations = pd.DataFrame({
        'Product ID': [101, 102, 103, 104, 105],
        'Product Name': ['Product A', 'Product B', 'Product C', 'Product D', 'Product E'],
        'Score': [4.5, 4.3, 4.7, 4.2, 4.8]
    })
    st.table(sample_recommendations)

    st.write("Future work: Integrate Bayesian recommendation model.")
